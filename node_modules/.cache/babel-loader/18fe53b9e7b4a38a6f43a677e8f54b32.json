{"ast":null,"code":"import { addInspectMethod } from \"./isomorphic.node\";\nimport { isLazyStack, isWritableStack, joinStacks, lazyJoinStacks } from \"./stack\";\nimport { getDeepKeys, toJSON } from \"./to-json\";\nconst protectedProps = [\"name\", \"message\", \"stack\"];\n/**\n * Extends the new error with the properties of the original error and the `props` object.\n *\n * @param newError - The error object to extend\n * @param originalError - The original error object, if any\n * @param props - Additional properties to add, if any\n */\n\nexport function extendError(newError, originalError, props) {\n  extendStack(newError, originalError); // Copy properties from the original error\n\n  if (originalError && typeof originalError === \"object\") {\n    mergeErrors(newError, originalError);\n  } // The default `toJSON` method doesn't output props like `name`, `message`, `stack`, etc.\n  // So replace it with one that outputs every property of the error.\n\n\n  newError.toJSON = toJSON; // On Node.js, add support for the `util.inspect()` method\n\n  if (addInspectMethod) {\n    addInspectMethod(newError);\n  } // Finally, copy custom properties that were specified by the user.\n  // These props OVERWRITE any previous props\n\n\n  if (props && typeof props === \"object\") {\n    Object.assign(newError, props);\n  }\n}\n/**\n * Extend the error stack to include its cause\n */\n\nfunction extendStack(newError, originalError) {\n  let stackProp = Object.getOwnPropertyDescriptor(newError, \"stack\");\n\n  if (isLazyStack(stackProp)) {\n    lazyJoinStacks(stackProp, newError, originalError);\n  } else if (isWritableStack(stackProp)) {\n    newError.stack = joinStacks(newError, originalError);\n  }\n}\n/**\n * Merges properties of the original error with the new error.\n *\n * @param newError - The error object to extend\n * @param originalError - The original error object, if any\n */\n\n\nfunction mergeErrors(newError, originalError) {\n  // Get the original error's keys\n  // NOTE: We specifically exclude properties that we have already set on the new error.\n  // This is _especially_ important for the `stack` property, because this property has\n  // a lazy getter in some environments\n  let keys = getDeepKeys(originalError, protectedProps); // HACK: We have to cast the errors to `any` so we can use symbol indexers.\n  // see https://github.com/Microsoft/TypeScript/issues/1863\n  // tslint:disable: no-any no-unsafe-any\n\n  let _newError = newError;\n  let _originalError = originalError;\n\n  for (let key of keys) {\n    if (_newError[key] === undefined) {\n      try {\n        _newError[key] = _originalError[key];\n      } catch (e) {// This property is read-only, so it can't be copied\n      }\n    }\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,gBAAT,QAAiC,mBAAjC;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,UAAvC,EAAmDC,cAAnD,QAAyE,SAAzE;AACA,SAASC,WAAT,EAAsBC,MAAtB,QAAoC,WAApC;AAGA,MAAMC,cAAc,GAA2B,CAAC,MAAD,EAAS,SAAT,EAAoB,OAApB,CAA/C;AAEA;;;;;;;;AAOA,OAAM,SAAUC,WAAV,CAAyBC,QAAzB,EAAgDC,aAAhD,EAA2EC,KAA3E,EAAyF;AAC7FC,aAAW,CAACH,QAAD,EAAWC,aAAX,CAAX,CAD6F,CAG7F;;AACA,MAAIA,aAAa,IAAI,OAAOA,aAAP,KAAyB,QAA9C,EAAwD;AACtDG,eAAW,CAACJ,QAAD,EAAWC,aAAX,CAAX;AACD,GAN4F,CAQ7F;AACA;;;AACAD,UAAQ,CAACH,MAAT,GAAkBA,MAAlB,CAV6F,CAY7F;;AACA,MAAIN,gBAAJ,EAAsB;AACpBA,oBAAgB,CAACS,QAAD,CAAhB;AACD,GAf4F,CAiB7F;AACA;;;AACA,MAAIE,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA9B,EAAwC;AACtCG,UAAM,CAACC,MAAP,CAAcN,QAAd,EAAwBE,KAAxB;AACD;AACF;AAED;;;;AAGA,SAASC,WAAT,CAAqBH,QAArB,EAA0CC,aAA1C,EAAmE;AACjE,MAAIM,SAAS,GAAGF,MAAM,CAACG,wBAAP,CAAgCR,QAAhC,EAA0C,OAA1C,CAAhB;;AAEA,MAAIR,WAAW,CAACe,SAAD,CAAf,EAA4B;AAC1BZ,kBAAc,CAACY,SAAD,EAAYP,QAAZ,EAAsBC,aAAtB,CAAd;AACD,GAFD,MAGK,IAAIR,eAAe,CAACc,SAAD,CAAnB,EAAgC;AACnCP,YAAQ,CAACS,KAAT,GAAiBf,UAAU,CAACM,QAAD,EAAWC,aAAX,CAA3B;AACD;AACF;AAED;;;;;;;;AAMA,SAASG,WAAT,CAAqBJ,QAArB,EAA0CC,aAA1C,EAAkE;AAChE;AACA;AACA;AACA;AACA,MAAIS,IAAI,GAAGd,WAAW,CAACK,aAAD,EAAgBH,cAAhB,CAAtB,CALgE,CAOhE;AACA;AACA;;AACA,MAAIa,SAAS,GAAGX,QAAhB;AACA,MAAIY,cAAc,GAAGX,aAArB;;AAEA,OAAK,IAAIY,GAAT,IAAgBH,IAAhB,EAAsB;AACpB,QAAIC,SAAS,CAACE,GAAD,CAAT,KAAmBC,SAAvB,EAAkC;AAChC,UAAI;AACFH,iBAAS,CAACE,GAAD,CAAT,GAAiBD,cAAc,CAACC,GAAD,CAA/B;AACD,OAFD,CAGA,OAAOE,CAAP,EAAU,CACR;AACD;AACF;AACF;AACF","names":["addInspectMethod","isLazyStack","isWritableStack","joinStacks","lazyJoinStacks","getDeepKeys","toJSON","protectedProps","extendError","newError","originalError","props","extendStack","mergeErrors","Object","assign","stackProp","getOwnPropertyDescriptor","stack","keys","_newError","_originalError","key","undefined","e"],"sourceRoot":"","sources":["../src/extend-error.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}