{"ast":null,"code":"const newline = /\\r?\\n/;\nconst onoCall = /\\bono[ @]/;\n/**\n * Is the property lazily computed?\n */\n\nexport function isLazyStack(stackProp) {\n  return Boolean(stackProp && stackProp.configurable && typeof stackProp.get === \"function\");\n}\n/**\n * Is the stack property writable?\n */\n\nexport function isWritableStack(stackProp) {\n  return Boolean( // If there is no stack property, then it's writable, since assigning it will create it\n  !stackProp || stackProp.writable || typeof stackProp.set === \"function\");\n}\n/**\n * Appends the original `Error.stack` property to the new Error's stack.\n */\n\nexport function joinStacks(newError, originalError) {\n  let newStack = popStack(newError.stack);\n  let originalStack = originalError ? originalError.stack : undefined;\n\n  if (newStack && originalStack) {\n    return newStack + \"\\n\\n\" + originalStack;\n  } else {\n    return newStack || originalStack;\n  }\n}\n/**\n * Calls `joinStacks` lazily, when the `Error.stack` property is accessed.\n */\n\nexport function lazyJoinStacks(lazyStack, newError, originalError) {\n  if (originalError) {\n    Object.defineProperty(newError, \"stack\", {\n      get: () => {\n        let newStack = lazyStack.get.apply(newError);\n        return joinStacks({\n          stack: newStack\n        }, originalError);\n      },\n      enumerable: false,\n      configurable: true\n    });\n  } else {\n    lazyPopStack(newError, lazyStack);\n  }\n}\n/**\n * Removes Ono from the stack, so that the stack starts at the original error location\n */\n\nfunction popStack(stack) {\n  if (stack) {\n    let lines = stack.split(newline); // Find the Ono call(s) in the stack, and remove them\n\n    let onoStart;\n\n    for (let i = 0; i < lines.length; i++) {\n      let line = lines[i];\n\n      if (onoCall.test(line)) {\n        if (onoStart === undefined) {\n          // We found the first Ono call in the stack trace.\n          // There may be other subsequent Ono calls as well.\n          onoStart = i;\n        }\n      } else if (onoStart !== undefined) {\n        // We found the first non-Ono call after one or more Ono calls.\n        // So remove the Ono call lines from the stack trace\n        lines.splice(onoStart, i - onoStart);\n        break;\n      }\n    }\n\n    if (lines.length > 0) {\n      return lines.join(\"\\n\");\n    }\n  } // If we get here, then the stack doesn't contain a call to `ono`.\n  // This may be due to minification or some optimization of the JS engine.\n  // So just return the stack as-is.\n\n\n  return stack;\n}\n/**\n * Calls `popStack` lazily, when the `Error.stack` property is accessed.\n */\n\n\nfunction lazyPopStack(error, lazyStack) {\n  Object.defineProperty(error, \"stack\", {\n    get: () => popStack(lazyStack.get.apply(error)),\n    enumerable: false,\n    configurable: true\n  });\n}","map":{"version":3,"mappings":"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","names":["newline","onoCall","isLazyStack","stackProp","Boolean","configurable","get","isWritableStack","writable","set","joinStacks","newError","originalError","newStack","popStack","stack","originalStack","undefined","lazyJoinStacks","lazyStack","Object","defineProperty","apply","enumerable","lazyPopStack","lines","split","onoStart","i","length","line","test","splice","join","error"],"sourceRoot":"","sources":["../src/stack.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}