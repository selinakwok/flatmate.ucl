{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n/*\n  The MIT License\n\n  Copyright (c) 2017-2019 EclipseSource Munich\n  https://github.com/eclipsesource/jsonforms\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n*/\n\n\nvar isEmpty_1 = tslib_1.__importDefault(require(\"lodash/isEmpty\"));\n\nvar get_1 = tslib_1.__importDefault(require(\"lodash/get\"));\n\nvar isArray_1 = tslib_1.__importDefault(require(\"lodash/isArray\"));\n\nvar isObject_1 = tslib_1.__importDefault(require(\"lodash/isObject\"));\n\nvar isFunction_1 = tslib_1.__importDefault(require(\"lodash/isFunction\"));\n\nvar isUndefined_1 = tslib_1.__importDefault(require(\"lodash/isUndefined\"));\n\nvar forOwn_1 = tslib_1.__importDefault(require(\"lodash/forOwn\"));\n\nvar isString_1 = tslib_1.__importDefault(require(\"lodash/isString\"));\n\nvar isPlainObject_1 = tslib_1.__importDefault(require(\"lodash/isPlainObject\"));\n\nvar uri_js_1 = require(\"uri-js\");\n\nvar isObjectSchema = function (schema) {\n  return schema.properties !== undefined;\n};\n\nvar isArraySchema = function (schema) {\n  return schema.type === 'array' && schema.items !== undefined;\n};\n\nexports.resolveData = function (instance, dataPath) {\n  if (isEmpty_1.default(dataPath)) {\n    return instance;\n  }\n\n  var dataPathSegments = dataPath.split('.');\n  return dataPathSegments.map(function (segment) {\n    return decodeURIComponent(segment);\n  }).reduce(function (curInstance, decodedSegment) {\n    if (!curInstance || !curInstance.hasOwnProperty(decodedSegment)) {\n      return undefined;\n    }\n\n    return curInstance[decodedSegment];\n  }, instance);\n};\n/**\n * Finds all references inside the given schema.\n *\n * @param schema The {@link JsonSchema} to find the references in\n * @param result The initial result map, default: empty map (this parameter is used for recursion\n *               inside the function)\n * @param resolveTuples Whether arrays of tuples should be considered; default: false\n */\n\n\nexports.findAllRefs = function (schema, result, resolveTuples) {\n  if (result === void 0) {\n    result = {};\n  }\n\n  if (resolveTuples === void 0) {\n    resolveTuples = false;\n  }\n\n  if (isObjectSchema(schema)) {\n    Object.keys(schema.properties).forEach(function (key) {\n      return exports.findAllRefs(schema.properties[key], result);\n    });\n  }\n\n  if (isArraySchema(schema)) {\n    if (Array.isArray(schema.items)) {\n      if (resolveTuples) {\n        var items = schema.items;\n        items.forEach(function (child) {\n          return exports.findAllRefs(child, result);\n        });\n      }\n    } else {\n      exports.findAllRefs(schema.items, result);\n    }\n  }\n\n  if (Array.isArray(schema.anyOf)) {\n    var anyOf = schema.anyOf;\n    anyOf.forEach(function (child) {\n      return exports.findAllRefs(child, result);\n    });\n  }\n\n  if (schema.$ref !== undefined) {\n    result[schema.$ref] = schema;\n  }\n\n  return result;\n};\n\nvar invalidSegment = function (pathSegment) {\n  return pathSegment === '#' || pathSegment === undefined || pathSegment === '';\n};\n/**\n * Resolve the given schema path in order to obtain a subschema.\n * @param {JsonSchema} schema the root schema from which to start\n * @param {string} schemaPath the schema path to be resolved\n * @param {JsonSchema} rootSchema the actual root schema\n * @returns {JsonSchema} the resolved sub-schema\n */\n\n\nexports.resolveSchema = function (schema, schemaPath, rootSchema) {\n  var _a, _b, _c;\n\n  if (isEmpty_1.default(schema)) {\n    return undefined;\n  }\n\n  var validPathSegments = schemaPath.split('/');\n  var resultSchema = schema;\n\n  for (var i = 0; i < validPathSegments.length; i++) {\n    var pathSegment = validPathSegments[i];\n    resultSchema = resultSchema === undefined || resultSchema.$ref === undefined ? resultSchema : exports.resolveSchema(schema, resultSchema.$ref);\n\n    if (invalidSegment(pathSegment)) {\n      // skip invalid segments\n      continue;\n    }\n\n    var curSchema = get_1.default(resultSchema, pathSegment);\n\n    if (!curSchema) {\n      // resolving was not successful, check whether the scope omitted an oneOf, allOf or anyOf and resolve anyway\n      var schemas = [].concat((_a = resultSchema === null || resultSchema === void 0 ? void 0 : resultSchema.oneOf) !== null && _a !== void 0 ? _a : [], (_b = resultSchema === null || resultSchema === void 0 ? void 0 : resultSchema.allOf) !== null && _b !== void 0 ? _b : [], (_c = resultSchema === null || resultSchema === void 0 ? void 0 : resultSchema.anyOf) !== null && _c !== void 0 ? _c : []);\n\n      for (var _i = 0, schemas_1 = schemas; _i < schemas_1.length; _i++) {\n        var item = schemas_1[_i];\n        curSchema = exports.resolveSchema(item, validPathSegments.slice(i).join('/'));\n\n        if (curSchema) {\n          break;\n        }\n      }\n\n      if (curSchema) {\n        // already resolved rest of the path\n        resultSchema = curSchema;\n        break;\n      }\n    }\n\n    resultSchema = curSchema;\n  } // TODO: because schema is already scoped we might end up with refs pointing\n  // outside of the current schema. It would be better if we'd always could deal\n  // with absolute paths here, so that we don't need to keep two different\n  // schemas around\n\n\n  if (resultSchema !== undefined && resultSchema.$ref !== undefined) {\n    try {\n      return retrieveResolvableSchema(schema, resultSchema.$ref);\n    } catch (e) {\n      return retrieveResolvableSchema(rootSchema, resultSchema.$ref);\n    }\n  }\n\n  return resultSchema;\n};\n/**\n * Normalizes the schema and resolves the given ref.\n *\n * @param {JsonSchema} full the JSON schema to resolved the reference against\n * @param {string} reference the reference to be resolved\n * @returns {JsonSchema} the resolved sub-schema\n */\n// disable rule because resolve is mutually recursive\n// tslint:disable:only-arrow-functions\n\n\nfunction retrieveResolvableSchema(full, reference) {\n  // tslint:enable:only-arrow-functions\n  var child = exports.resolveSchema(full, reference);\n  var allRefs = exports.findAllRefs(child);\n  var innerSelfReference = allRefs[reference];\n\n  if (innerSelfReference !== undefined) {\n    innerSelfReference.$ref = '#';\n  }\n\n  return child;\n}\n\nexports.findRefs = function (obj) {\n  var refs = {}; // Walk the document (or sub document) and find all JSON References\n\n  walk([], obj, [], function (_a, node, path) {\n    var processChildren = true;\n    var refDetails;\n    var refPtr;\n\n    if (isRefLike(node, false)) {\n      refDetails = getRefDetails(node);\n\n      if (refDetails.type !== 'invalid') {\n        refPtr = pathToPtr(path, undefined);\n        refs[refPtr] = refDetails;\n      } // Whenever a JSON Reference has extra children, its children should not be processed.\n      //   See: http://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03#section-3\n\n\n      if (getExtraRefKeys(node).length > 0) {\n        processChildren = false;\n      }\n    }\n\n    return processChildren;\n  });\n  return refs;\n}; // pure copy of JsonRefs (added types)\n\n\nvar walk = function (ancestors, node, path, fn) {\n  var processChildren = true;\n\n  var walkItem = function (item, segment) {\n    path.push(segment);\n    walk(ancestors, item, path, fn);\n    path.pop();\n  }; // Call the iteratee\n\n\n  if (isFunction_1.default(fn)) {\n    processChildren = fn(ancestors, node, path);\n  } // We do not process circular objects again\n\n\n  if (ancestors.indexOf(node) === -1) {\n    ancestors.push(node);\n\n    if (processChildren !== false) {\n      if (isArray_1.default(node)) {\n        node.forEach(function (member, index) {\n          walkItem(member, index.toString());\n        });\n      } else if (isObject_1.default(node)) {\n        forOwn_1.default(node, function (cNode, key) {\n          walkItem(cNode, key);\n        });\n      }\n    }\n\n    ancestors.pop();\n  }\n};\n\nvar pathToPtr = function (path, hashPrefix) {\n  if (!isArray_1.default(path)) {\n    throw new Error('path must be an Array');\n  } // Encode each segment and return\n\n\n  return (hashPrefix !== false ? '#' : '') + (path.length > 0 ? '/' : '') + encodePath(path).join('/');\n};\n\nvar encodePath = function (path) {\n  if (!isArray_1.default(path)) {\n    throw new TypeError('path must be an array');\n  }\n\n  return path.map(function (seg) {\n    if (!isString_1.default(seg)) {\n      seg = JSON.stringify(seg);\n    }\n\n    return seg.replace(/~/g, '~0').replace(/\\//g, '~1');\n  });\n};\n\nvar uriDetailsCache = {};\nvar badPtrTokenRegex = /~(?:[^01]|$)/g;\n\nvar getRefDetails = function (obj) {\n  var details = {\n    def: obj\n  };\n  var cacheKey;\n  var extraKeys;\n  var uriDetails;\n\n  try {\n    if (isRefLike(obj, true)) {\n      cacheKey = obj.$ref;\n      uriDetails = uriDetailsCache[cacheKey];\n\n      if (isUndefined_1.default(uriDetails)) {\n        uriDetails = uriDetailsCache[cacheKey] = parseURI(cacheKey);\n      }\n\n      details.uri = cacheKey;\n      details.uriDetails = uriDetails;\n\n      if (isUndefined_1.default(uriDetails.error)) {\n        details.type = getRefType(details); // Validate the JSON Pointer\n\n        try {\n          if (['#', '/'].indexOf(cacheKey[0]) > -1) {\n            isPtr(cacheKey, true);\n          } else if (cacheKey.indexOf('#') > -1) {\n            isPtr(uriDetails.fragment, true);\n          }\n        } catch (err) {\n          details.error = err.message;\n          details.type = 'invalid';\n        }\n      } else {\n        details.error = details.uriDetails.error;\n        details.type = 'invalid';\n      } // Identify warning\n\n\n      extraKeys = getExtraRefKeys(obj);\n\n      if (extraKeys.length > 0) {\n        details.warning = 'Extra JSON Reference properties will be ignored: ' + extraKeys.join(', ');\n      }\n    } else {\n      details.type = 'invalid';\n    }\n  } catch (err) {\n    details.error = err.message;\n    details.type = 'invalid';\n  }\n\n  return details;\n};\n\nvar getRefType = function (refDetails) {\n  var type; // Convert the URI reference to one of our types\n\n  switch (refDetails.uriDetails.reference) {\n    case 'absolute':\n    case 'uri':\n      type = 'remote';\n      break;\n\n    case 'same-document':\n      type = 'local';\n      break;\n\n    default:\n      type = refDetails.uriDetails.reference;\n  }\n\n  return type;\n};\n\nvar getExtraRefKeys = function (ref) {\n  return Object.keys(ref).filter(function (key) {\n    return key !== '$ref';\n  });\n};\n\nvar parseURI = function (uri) {\n  // We decode first to avoid doubly encoding\n  return uri_js_1.parse(uri);\n};\n\nvar isPtr = function (ptr, throwWithDetails) {\n  var valid = true;\n  var firstChar;\n\n  try {\n    if (isString_1.default(ptr)) {\n      if (ptr !== '') {\n        firstChar = ptr.charAt(0);\n\n        if (['#', '/'].indexOf(firstChar) === -1) {\n          throw new Error('ptr must start with a / or #/');\n        } else if (firstChar === '#' && ptr !== '#' && ptr.charAt(1) !== '/') {\n          throw new Error('ptr must start with a / or #/');\n        } else if (ptr.match(badPtrTokenRegex)) {\n          throw new Error('ptr has invalid token(s)');\n        }\n      }\n    } else {\n      throw new Error('ptr is not a String');\n    }\n  } catch (err) {\n    if (throwWithDetails === true) {\n      throw err;\n    }\n\n    valid = false;\n  }\n\n  return valid;\n};\n\nvar isRefLike = function (obj, throwWithDetails) {\n  var refLike = true;\n\n  try {\n    if (!isPlainObject_1.default(obj)) {\n      throw new Error('obj is not an Object');\n    } else if (!isString_1.default(obj.$ref)) {\n      throw new Error('obj.$ref is not a String');\n    }\n  } catch (err) {\n    if (throwWithDetails) {\n      throw err;\n    }\n\n    refLike = false;\n  }\n\n  return refLike;\n};","map":{"version":3,"mappings":"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","names":["isObjectSchema","schema","properties","undefined","isArraySchema","type","items","exports","instance","dataPath","isEmpty_1","dataPathSegments","split","map","segment","reduce","curInstance","decodedSegment","hasOwnProperty","result","resolveTuples","Object","keys","forEach","key","Array","isArray","child","anyOf","$ref","invalidSegment","pathSegment","schemaPath","rootSchema","validPathSegments","resultSchema","i","length","curSchema","get_1","schemas","concat","oneOf","_a","allOf","_b","_c","_i","item","slice","join","retrieveResolvableSchema","e","full","reference","allRefs","innerSelfReference","obj","refs","walk","node","path","processChildren","refDetails","refPtr","isRefLike","getRefDetails","pathToPtr","getExtraRefKeys","ancestors","fn","walkItem","push","pop","isFunction_1","indexOf","isArray_1","member","index","toString","isObject_1","forOwn_1","cNode","hashPrefix","Error","encodePath","TypeError","isString_1","seg","JSON","stringify","replace","uriDetailsCache","badPtrTokenRegex","details","def","cacheKey","extraKeys","uriDetails","isUndefined_1","parseURI","uri","error","getRefType","isPtr","fragment","err","message","warning","ref","filter","uri_js_1","ptr","throwWithDetails","valid","firstChar","charAt","match","refLike","isPlainObject_1"],"sourceRoot":"","sources":["../../src/util/resolvers.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}